generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model course {
  id                Int                 @id @default(autoincrement())
  name              Int?                @unique
  expertise_courses expertise_courses[]
}

model expertise {
  id                Int                 @id @default(autoincrement())
  name              Int?                @unique
  expertise_courses expertise_courses[]
  user_expertise    user_expertise[]
}

model expertise_courses {
  id           Int        @id @default(autoincrement())
  expertise_id Int?
  course_id    Int?
  course       course?    @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  expertise    expertise? @relation(fields: [expertise_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model projects {
  id            Int         @id @default(autoincrement())
  professor_id  Int?
  university_id Int?
  users         users?      @relation(fields: [professor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  university    university? @relation(fields: [university_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  id         Int      @id @default(autoincrement())
  token      String   @db.VarChar(500)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user_id    Int?
  users      users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model university {
  id              Int               @id @default(autoincrement())
  name            Int?
  projects        projects[]
  user_university user_university[]
}

model user_expertise {
  id           Int        @id @default(autoincrement())
  user_id      Int?
  expertise_id Int?
  expertise    expertise? @relation(fields: [expertise_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_university {
  id            Int         @id @default(autoincrement())
  user_id       Int?
  university_id Int?
  university    university? @relation(fields: [university_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id              Int               @id @default(autoincrement())
  name            String?           @db.VarChar(80)
  email           String?           @unique @db.VarChar(80)
  password        String?
  is_teacher      Boolean?
  projects        projects[]
  session         session[]
  user_expertise  user_expertise[]
  user_university user_university[]
}
